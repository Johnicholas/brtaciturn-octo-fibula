input void UP_KEY_DOWN;
input void LEFT_KEY_DOWN;
input void RIGHT_KEY_DOWN;
input void UP_KEY_UP;
input void LEFT_KEY_UP;
input void RIGHT_KEY_UP;
input void UPDATE;
output (int, int, int) NEW_BUNNY;
output (int) FREE_BUNNY;
output (int) SPIN_BUNNY;
output (int, int, int) SET_BUNNY_POSITION;

class Keys with
  var bool& up_down;
  var bool& left_down;
  var bool& right_down;
do
  par do
    every UP_KEY_DOWN do
      up_down = true;
    end
  with
    every LEFT_KEY_DOWN do
      left_down = true;
    end
  with
    every RIGHT_KEY_DOWN do
      right_down = true;
    end
  with
    every UP_KEY_UP do
      up_down = false;
    end
  with
    every LEFT_KEY_UP do
      left_down = false;
    end
  with
    every RIGHT_KEY_UP do
      right_down = false;
    end
  end
end

class SpinBunny with
  var int id;
  var int x;
  var int y;
  var bool& should_spin;
do
  emit NEW_BUNNY => (id, x, y);
  finalize with
    emit FREE_BUNNY => id;
  end
  every UPDATE do
    if should_spin then
      emit SPIN_BUNNY => id;
    end
  end
end

loop do
  var int ticker = 0;
  par/or do
    loop do
      await UPDATE;
      if ticker < 1000 then
        ticker = ticker + 1;
      else
        break;
      end
    end
  with
    var bool up_down = false;
    var bool left_down = false;
    var bool right_down = false;
    var Keys keys with
      this.up_down = &up_down;
      this.left_down = &left_down;
      this.right_down = &right_down;
    end;

    var SpinBunny one with
      this.id = 1;
      this.x = 200;
      this.y = 100;
      this.should_spin = &up_down;
    end;

    var SpinBunny two with
      this.id = 2;
      this.x = 100;
      this.y = 200;
      this.should_spin = &left_down;
    end;

    var SpinBunny three with
      this.id = 3;
      this.x = 300;
      this.y = 200;
      this.should_spin = &right_down;
    end;

    var int x = 200;
    var int y = 300;
    emit NEW_BUNNY => (4, x, y);
    finalize with
      emit FREE_BUNNY => 4;
    end
    every UPDATE do
      if keys.up_down then
        y = y - 1;
      end
      if keys.left_down then
        x = x - 1;
      end
      if keys.right_down then
        x = x + 1;
      end
      emit SET_BUNNY_POSITION => (4, x, y);
    end
  end
end
